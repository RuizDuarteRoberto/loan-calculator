{"version":3,"sources":["components/Form.js","components/Result.js","components/Message.js","components/Spinner.js","App.js","helper.js","serviceWorker.js","index.js"],"names":["Form","state","amount","term","handleSubmit","e","preventDefault","_this$state","_this","props","loanInformation","handleChange","_e$target","target","name","value","setState","Object","defineProperty","Number","validateForm","_this$state2","react_default","a","createElement","onSubmit","this","onChange","id","className","type","placeholder","disabled","Component","Result","console","log","total","toFixed","Message","Spinner","App","loading","totalAmount","totalTerm","calculateTotal","setTimeout","component","components_Spinner","components_Result","components_Message","react","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cc46486.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass Form extends Component {\n     state = { \n          amount: '',\n          term : ''\n     }\n\n     handleSubmit = (e) => {\n          e.preventDefault();\n\n          // read the values from the state\n          const {amount, term} = this.state;\n\n          // pass the data to the main component\n\n          this.props.loanInformation(amount, term);\n     }\n\n     handleChange = (e) => {\n          // read form data\n          const {name, value} = e.target;\n\n          // update the state\n          this.setState({\n               [name] : Number(value)\n          })\n     }\n\n     validateForm = () => {\n          // destructuring\n          const {amount, term} = this.state;\n\n          const notValid = !amount || !term;\n\n          // console.log(notValid);\n\n          return notValid;\n     }\n\n     render() { \n\n          // extract some contents from the state\n          // const {amount} = this.state;\n\n          return ( \n               <form onSubmit={this.handleSubmit}>\n                    <div>\n                         <label>Amount</label>\n                         <input \n                              onChange={this.handleChange}\n                              id=\"name\" \n                              name=\"amount\" \n                              className=\"u-full-width\" \n                              type=\"number\" \n                              placeholder=\"Eg: 3000\" />\n                    </div>\n                    <div>\n                         <label>Months to Repay</label>\n                         <select \n                              onChange={this.handleChange}\n                              name=\"term\" \n                              className=\"u-full-width\">\n                                   <option value=\"\">Select</option>\n                                   <option value=\"3\">3 Months</option>\n                                   <option value=\"6\">6 Months</option>\n                                   <option value=\"12\">12 Months</option>\n                                   <option value=\"24\">24 Months</option>\n                         </select>\n                    </div>\n                    <div>\n                         <input disabled={ this.validateForm() }\n                                type=\"submit\" \n                                value=\"Calculate\" \n                                className=\"u-full-width button-primary\" />\n                    </div>\n               </form>\n           );\n     }\n}\n \nexport default Form;","import React from 'react';\n\nconst Result = (props) => {\n     console.log(props);\n     return ( \n          <div className=\"u-full-width result\">\n               <h2>Results:</h2>\n               <p>The Loan Amount: $ {props.amount}</p>\n               <p>Months to Repay: {props.term}</p>\n               <p>Total Payment: $ {props.total}</p>\n               <p>Monthly Payment: $ { (props.total / props.term).toFixed(2) }</p>\n          </div>\n      );\n}\n \nexport default Result;","import React from 'react';\n\nconst Message = () => (\n     <p>Add an Amount and the Term to Repay</p>\n)\nexport default Message;\n","import React from 'react';\nimport '../spinner.css';\n\nconst Spinner = () => {\n     return ( \n          <div className=\"spinner\">\n               <div className=\"dot1\"></div>\n               <div className=\"dot2\"></div>\n          </div>\n      );\n}\n \nexport default Spinner;\n","import React, { Component, Fragment } from 'react';\nimport './normalize.css';\nimport './skeleton.css';\nimport Form from './components/Form';\nimport {calculateTotal} from './helper';\nimport Result from './components/Result';\nimport Message from './components/Message';\nimport Spinner from './components/Spinner';\n\nclass App extends Component {\n\n  state = {\n      total: '',\n      amount: '',\n      term: '',\n      loading: false\n  }\n\n  loanInformation = (amount, term) => {\n\n      const total = calculateTotal(amount, term);\n\n      this.setState({\n        loading: true\n      }, () => {\n          setTimeout(() => {\n              this.setState({\n                amount, \n                total,\n                term, \n                loading: false\n              })\n          }, 3000);\n      } )\n  }\n\n  render() {\n    // desctructuring the state\n    const {term, amount, total, loading} = this.state;\n\n    // Conditionally Render a Component\n    let component;\n    if(total === '' && !loading ) {\n      component = <Message />\n   } else if(loading){\n      component = <Spinner />\n   } else {\n     component = <Result\n                    total={total}\n                    amount={amount}\n                    term={term}\n                 />\n   }\n     \n    return (\n        <Fragment>\n            <h1>Loan Calculator</h1>\n            <div className=\"container\">\n              <Form \n                loanInformation={this.loanInformation}\n              />\n\n              <div className=\"messages\">\n                  {component}\n              </div>\n            </div>\n        </Fragment>\n    );\n  }\n}\n\nexport default App;\n","export function calculateTotal(amount, term ){\n\n     // Calculate the Total Interest based on the Amount\n     // 0 - 1000 = 25%\n     // 1001 - 5000 = 20%\n     // 5001 - 10000 = 15%\n     // +10000 = 10%\n     let totalAmount;\n\n     if(amount <= 1000) {\n          totalAmount = amount * .25;\n     } else if(amount > 1000 && amount <= 5000) {\n          totalAmount = amount * .20;\n     } else if(amount > 5000 && amount <= 10000) {\n          totalAmount = amount * .15;\n     } else {\n          totalAmount = amount * .10;\n     }\n     // Calculate the Total Interest based on the Time\n     // 3 - 5%\n     // 6 - 10%\n     // 12 - 15%\n     // 24 - 20%\n\n     let totalTerm;\n\n     switch(term){\n          case 3: \n               totalTerm = amount * .05;\n               break;\n          case 6: \n               totalTerm = amount * .1;\n               break;\n          case 12: \n               totalTerm = amount * .15;\n               break;\n          case 24: \n               totalTerm = amount * .2;\n               break;\n          default:\n               break;\n     }\n\n     return amount + totalTerm + totalAmount;\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}